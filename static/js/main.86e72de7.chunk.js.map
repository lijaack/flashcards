{"version":3,"sources":["flashcard-data/flashcardData.js","App.js","serviceWorker.js","index.js"],"names":["flashcardData","java","question","answer","testAutomation","angular","servlets","spring","hibernate","postgres","App","state","topic","questions","random","showAnswer","onChange","event","setState","target","name","value","generateRandom","Math","floor","length","this","className","htmlFor","defaultValue","id","disabled","Object","keys","map","k","i","key","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAiFeA,G,MAXO,CAClBC,KAvES,CACT,CACIC,SAAU,YACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,MAiEXC,eA9DmB,CACnB,CACIF,SAAU,QACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,MAwDXE,QArDY,CACZ,CACIH,SAAU,QACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,MA+CXG,SA5Ca,CACb,CACIJ,SAAU,QACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,MAsCXI,OAnCW,CACX,CACIL,SAAU,QACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,MA6BXK,UA1Bc,CACd,CACIN,SAAU,QACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,MAoBXM,SAjBa,CACb,CACIP,SAAU,QACVC,OAAO,KAEX,CACID,SAAS,MACTC,OAAO,QCQAO,E,4MAtEbC,MAAM,CACJC,MAAM,GACNC,UAAU,GACVC,OAAQ,KACRC,YAAW,G,EAKbC,SAAY,SAAAC,GACV,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,OAAS,EAAKC,iB,EAElEA,eAAe,WACb,EAAKJ,SAAS,CAACJ,OAAQS,KAAKC,MAAMD,KAAKT,SAAW,EAAKH,MAAME,UAAU,EAAKF,MAAMC,OAAOa,UACzF,EAAKP,SAAS,CAACH,YAAY,K,EAE7BA,WAAa,WACX,EAAKG,SAAS,CAACH,YAAY,K,kEAV3BW,KAAKR,SAAS,CAACL,UAAWb,M,+BAa1B,IAAIE,EACAC,EAMJ,OAJuB,MAApBuB,KAAKf,MAAMG,SACZZ,EAAW,4BAAKwB,KAAKf,MAAME,UAAUa,KAAKf,MAAMC,OAAOc,KAAKf,MAAMG,QAAQZ,UAC1EC,EAAS,2BAAIuB,KAAKf,MAAME,UAAUa,KAAKf,MAAMC,OAAOc,KAAKf,MAAMG,QAAQX,SAGnE,yBAAKwB,UAAU,OACb,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cAEf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,SAAf,kBACA,4BAAQD,UAAU,wCAAyCE,aAAc,UAAWb,SAAUU,KAAKV,SAAUI,KAAK,QAAQU,GAAG,SAC3H,4BAAQT,MAAM,UAAUU,UAAQ,GAAhC,kBACEC,OAAOC,KAAKP,KAAKf,MAAME,WAAWqB,KAAI,SAACC,EAAGC,GAC1C,OAAO,4BAAQC,IAAKD,EAAGf,MAAOc,GAAIA,SAK1C,yBAAKR,UAAU,eAIjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cAEf,yBAAKA,UAAU,YACVzB,EACAwB,KAAKf,MAAMI,WAAYZ,EAAO,GAC/B,6BACE,4BAAQmC,KAAK,SAASX,UAAU,yBAAyBY,QAASb,KAAKX,YAAvE,cAECW,KAAKf,MAAMC,MAAO,4BAAS0B,KAAK,SAASX,UAAU,sBAAsBY,QAASb,KAAKJ,gBAArE,gBAA2G,IAEpI,yBAAKK,UAAU,qB,GA7Dba,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.86e72de7.chunk.js","sourcesContent":["const java = [\r\n    {\r\n        question: \"h2222222i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst testAutomation = [\r\n    {\r\n        question: \"h324i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst angular = [\r\n    {\r\n        question: \"h324i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst servlets = [\r\n    {\r\n        question: \"h324i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst spring = [\r\n    {\r\n        question: \"h324i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst hibernate = [\r\n    {\r\n        question: \"h324i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst postgres = [\r\n    {\r\n        question: \"h324i\",\r\n        answer:\"1\"\r\n    },\r\n    {\r\n        question:\"hi2\",\r\n        answer:\"3\"\r\n    }\r\n]\r\nconst flashcardData = {\r\n    java:java,\r\n    testAutomation:testAutomation,\r\n    angular:angular,\r\n    servlets:servlets,\r\n    spring:spring,\r\n    hibernate:hibernate,\r\n    postgres:postgres\r\n};\r\n\r\n\r\nexport default flashcardData;","import React, { Component } from 'react';\nimport './App.css';\nimport flashcardData from './flashcard-data/flashcardData';\n\nclass App extends Component {\n  state={\n    topic:'',\n    questions:{},\n    random: null,\n    showAnswer:false\n  }\n  componentDidMount(){\n    this.setState({questions: flashcardData});\n  }\n  onChange  = event => {\n    this.setState({ [event.target.name]: event.target.value }, this.generateRandom);\n  }\n  generateRandom=()=>{\n    this.setState({random: Math.floor(Math.random() * this.state.questions[this.state.topic].length)})\n    this.setState({showAnswer: false});\n  }\n  showAnswer = () =>{\n    this.setState({showAnswer: true});\n  }\n  render() {\n    let question\n    let answer\n\n    if(this.state.random !=null){\n      question = <h3>{this.state.questions[this.state.topic][this.state.random].question}</h3>;\n      answer = <p>{this.state.questions[this.state.topic][this.state.random].answer}</p>;\n    }\n    return (\n          <div className=\"App\">\n            <div className=\"container\">\n\n              <div className=\"row \">\n                <div className=\"col-md-4 \">\n                </div>\n                <div className=\"col-md-4 \">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"topic\">choose a topic</label>\n                    <select className=\"form-control form-control-sm dropdown\"  defaultValue={'DEFAULT'} onChange={this.onChange} name=\"topic\" id=\"topic\">\n                      <option value=\"DEFAULT\" disabled>Choose a Topic</option>\n                      { Object.keys(this.state.questions).map((k, i)=>{\n                        return <option key={i} value={k}>{k}</option>\n                      })}\n                    </select>\n                  </div>\n                </div>\n                <div className=\"col-md-4 \">\n                </div>      \n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-md-3 \">\n                </div>\n                <div className=\"col-md-6\">\n                    {question}\n                    {this.state.showAnswer? answer:''}\n                    <br></br>\n                      <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={this.showAnswer}>showAnswer</button> \n\n                      {this.state.topic? <button  type=\"button\" className=\"btn btn-sm btn-info\" onClick={this.generateRandom}>New Question</button>:''}\n                </div>\n                <div className=\"col-md-3 \">\n                </div>      \n\n              </div>\n            </div>\n          </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}